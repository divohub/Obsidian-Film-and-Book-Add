import sys
from dotenv import load_dotenv
import io
import requests
import pyperclip
import argparse
import os
import re
from deep_translator import GoogleTranslator
from transliterate import translit
from logger import setup_logger


load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OBSIDIAN_VAULT_PATH = os.getenv("OBSIDIAN_VAULT_PATH_MOVIE")  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ Obsidian .env
TMDB_API_KEY = os.getenv("TMDB_API_KEY")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á –¥–ª—è TMDb –≤ .env


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

logging = setup_logger(log_file="script.log")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
def clean_filename(title):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    cleaned_title = re.sub(r'[^\w\s-]', '', title)
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # cleaned_title = cleaned_title.replace(" ", "_")
    return cleaned_title


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
def translate_to_english(text):
    try:
        translation = GoogleTranslator(source='auto', target='en').translate(text)
        return translation
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –≤ TMDb
def search_tmdb(title, year=None, content_type="movie"):
    """
    –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞ TMDb.

    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞.
    :param year: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :param content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ("movie" –¥–ª—è —Ñ–∏–ª—å–º–æ–≤, "tv" –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤).
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–µ, –ª–∏–±–æ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """

    if content_type not in ["movie", "tv"]:
        raise ValueError("content_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å movie –∏–ª–∏ tv")
    
    url = f"https://api.themoviedb.org/3/search/{content_type}?api_key={TMDB_API_KEY}&query={title}&language=ru-RU"
    if year:
        url += f"&year={year}"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å 
    response = requests.get(url)
    data = response.json()
    
    
    if data.get("results"):
        if year:
            for item in data["results"]:
                release_date = item.get("release_date", "") if content_type == "movie" else item.get("first_air_date", "")
                if release_date.startswith(str(year)):
                    return item
                
        return data["results"][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ –ø–æ ID
def get_details(id, content_type):
    url = f"https://api.themoviedb.org/3/{content_type}/{id}?api_key={TMDB_API_KEY}&language=ru-RU"
    response = requests.get(url)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–ª—å–º–∞ (—Ä–µ–∂–∏—Å—Å—ë—Ä—ã, –∞–∫—Ç—ë—Ä—ã –∏ —Ç.–¥.)
def get_credits(id, content_type):
    url = f"https://api.themoviedb.org/3/{content_type}/{id}/credits?api_key={TMDB_API_KEY}"
    response = requests.get(url)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
def is_russian(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    return any('\u0400' <= char <= '\u04FF' for char in text)


def get_input_text(key):
    input_texts = {
        "content_type": ("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (movie/tv)", "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å movie –∏–ª–∏ tv"),
        "movie_title": ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
        "tv_title": ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
        "year": ("–í–≤–∏–¥–µ—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞", "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"),
    }
    if key in input_texts:
        return input_texts[key][0], input_texts[key][1], True
    else:
        return None,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á", False
    

def get_input(key):
    user_input_text, error, exists = get_input_text(key)
    if not exists:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á: {key}") 
    while True:
        try:
            user_input = input(f"{user_input_text}: ").strip()
            if key == "content_type" and user_input not in ["movie", "tv"]: raise ValueError
            if key!="year" and not user_input: raise ValueError
            break
        except ValueError:
            logging.error(error)
        except KeyboardInterrupt:
            logging.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            sys.exit(1)
    return user_input

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
def extract_year(text):
    # –ò—â–µ–º –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY
    match = re.search(r"\b(19\d{2}|20\d{2})\b", text)
    return match.group(0) if match else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ —Å—Å—ã–ª–∫–∏
def format_as_links(items):
    if not items:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ [[–≠–ª–µ–º–µ–Ω—Ç]]
    return " ".join(f"[[{item}]]" for item in items)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
def format_genres(genres):
    if not genres:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä –≤ [[–ñ–∞–Ω—Ä]]
    return " ".join(f"[[{genre['name']}]]" for genre in genres)



def main():
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ TMDb.")
    parser.add_argument("-m", "--movie", action="store_true", help="–ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã")
    parser.add_argument("-t", "--tv", action="store_true", help="–ò—Å–∫–∞—Ç—å —Å–µ—Ä–∏–∞–ª—ã")
    parser.add_argument("-c", "--clipboard", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
    parser.add_argument("--title", help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞")
    parser.add_argument("--year", type=int, help="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞")
    args = parser.parse_args()

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if args.movie:
        content_type = "movie"
    elif args.tv:
        content_type = "tv"
    else:
        content_type = get_input("content_type")
 


    if args.clipboard:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        clipboard_text = pyperclip.paste().strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        year = extract_year(clipboard_text)

        title = re.sub(r"\b(19\d{2}|20\d{2})\b", "", clipboard_text).strip()

    if not args.clipboard:
        title = get_input(f"{content_type}_title")
            
        
    if not args.clipboard:
        year = get_input("year")

    else :
        ValueError("year –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int")    
  




    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if is_russian(title):
        logging.info("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é...")
        data = search_tmdb(title, year, content_type)

        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
        if not data:
            logging.info("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ...")
            transliterated_title = translit(title, 'ru', reversed=True)  # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
            logging.info(f"–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {transliterated_title}") 
            data = search_tmdb(transliterated_title, year, content_type)

            # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
            if not data:
                logging.info("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
                translated_title = translate_to_english(title)
                if translated_title:
                    print(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è: {translated_title}")
                    data = search_tmdb(translated_title, year, content_type)
    else:
        logging.info("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º...")
        data = search_tmdb(title, year, content_type)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º Markdown-—Ñ–∞–π–ª
    if data:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞ –ø–æ ID
        details = get_details(data['id'], content_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ñ–∏–ª—å–º–∞ (—Ä–µ–∂–∏—Å—Å—ë—Ä—ã, –∞–∫—Ç—ë—Ä—ã –∏ —Ç.–¥.)
        credits = get_credits(data['id'], content_type)
        

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ (–¥–ª—è —Ñ–∏–ª—å–º–æ–≤) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤)
        if content_type == "movie":
            directors = [crew['name'] for crew in credits.get('crew', []) if crew['job'] == 'Director']
        else:
            directors = [creator['name'] for creator in credits.get('created_by', [])]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—è—Ç—å –≥–ª–∞–≤–Ω—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤
        top_actors = [actor['name'] for actor in credits.get('cast', [])[:5]]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        title = details.get("title" if content_type == "movie" else "name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        year = details.get("release_date" if content_type == "movie" else "first_air_date", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")[:4]
        description = details.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        genres = details.get("genres", [])
        poster_path = details.get("poster_path", "")
        poster_url = f"https://image.tmdb.org/t/p/original{poster_path}" if poster_path else ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã, —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –∏ –∞–∫—Ç—ë—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
        genres_links = format_genres(genres)
        directors_links = format_as_links(directors)
        actors_links = format_as_links(top_actors)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        poster_md = f"![–ü–æ—Å—Ç–µ—Ä]({poster_url})" if poster_url else ""

        md_template = f"""---
title: {title}
year: {year}
director: {", ".join(directors) if directors else "–†–µ–∂–∏—Å—Å—ë—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
genre: {", ".join(genre['name'] for genre in genres) if genres else "–ñ–∞–Ω—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
description: {description}
type: {content_type}
cover: {poster_url}
watched: false
---

# {title}

{poster_md}

**–ì–æ–¥:** [[{year}]]  
**–†–µ–∂–∏—Å—Å—ë—Ä:** {directors_links}  
**–ê–∫—Ç—ë—Ä—ã:** {actors_links}  
**–ñ–∞–Ω—Ä:** {genres_links}  

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

### References

[[–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]]
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Obsidian
        file_name = f"{clean_filename(title)}.md"
        file_path = os.path.join(OBSIDIAN_VAULT_PATH, file_name)
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(md_template)
        
        logging.info(f"‚úÖ File {file_name} —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ Obsidian!")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")

if __name__ == "__main__":
    main()