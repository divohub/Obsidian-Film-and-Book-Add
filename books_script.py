import requests
from dotenv import load_dotenv
import pyperclip
import os
from deep_translator import GoogleTranslator
import sys
import io


load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OBSIDIAN_VAULT_PATH = os.getenv("OBSIDIAN_VAULT_PATH_BOOK")  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ Obsidian
GOOGLE_BOOKS_API_KEY = os.getenv("GOOGLE_BOOKS_API_KEY")  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á –¥–ª—è Google Books API



sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
def translate_to_english(text):
    try:
        translation = GoogleTranslator(source='auto', target='en').translate(text)
        return translation
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
def search_book(title):
    url = f"https://www.googleapis.com/books/v1/volumes?q=intitle:{title}&key={GOOGLE_BOOKS_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data.get("totalItems", 0) > 0:
            return data["items"][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
def is_russian(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    return any('\u0400' <= char <= '\u04FF' for char in text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
def format_categories(categories):
    if not categories:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä –≤ [[–ñ–∞–Ω—Ä]]
    return " ".join(f"[[{category}]]" for category in categories)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ —Å—Å—ã–ª–∫–∏
def format_as_links(items):
    if not items:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ [[–≠–ª–µ–º–µ–Ω—Ç]]
    return " ".join(f"[[{item}]]" for item in items)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
def shorten_description(description, max_length=500):
    if not description:
        return ""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–æ max_length —Å–∏–º–≤–æ–ª–æ–≤
    description = " ".join(description.split())
    if len(description) > max_length:
        return description[:max_length] + "..."
    return description

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
title = pyperclip.paste().strip()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
if is_russian(title):
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é...")
    book = search_book(title)

    # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
    if not book:
        print("üîç –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
        translated_title = translate_to_english(title)
        if translated_title:
            print(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è: {translated_title}")
            book = search_book(translated_title)
else:
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É...")
    book = search_book(title)

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º Markdown-—Ñ–∞–π–ª
if book:
    volume_info = book.get("volumeInfo", {})
    title = volume_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    authors = volume_info.get("authors", ["–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"])
    published_date = volume_info.get("publishedDate", "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    description = shorten_description(volume_info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
    categories = volume_info.get("categories", [])
    cover_url = volume_info.get("imageLinks", {}).get("thumbnail", "")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤, –≥–æ–¥ –∏ –∂–∞–Ω—Ä—ã –≤ —Å—Å—ã–ª–∫–∏
    authors_links = format_as_links(authors)
    year_link = f"[[{published_date}]]" if published_date else "[[–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω]]"
    genres_links = format_as_links(categories)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    cover_md = f"![–û–±–ª–æ–∂–∫–∞]({cover_url})" if cover_url else ""

    md_template = f"""---
title: {title}
author: {", ".join(authors)}
year: {published_date}
genre: {", ".join(categories) if categories else "–ñ–∞–Ω—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
description: {description}
type: book
cover: {cover_url}
---

# {title}

{cover_md}

**–ê–≤—Ç–æ—Ä:** {authors_links}  
**–ì–æ–¥:** {year_link}  
**–ñ–∞–Ω—Ä:** {genres_links}  

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

[[–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]]
[[–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞]]
"""


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Obsidian
    file_name = f"{title}.md"
    file_path = os.path.join(OBSIDIAN_VAULT_PATH, file_name)
    
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(md_template)
    
    print(f"‚úÖ –§–∞–π–ª {file_name} —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ Obsidian!")
else:
    print("‚ùå –û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")

