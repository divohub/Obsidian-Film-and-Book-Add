import sys
from dotenv import load_dotenv
import io
import requests
import pyperclip
import os
import re
from deep_translator import GoogleTranslator
from transliterate import translit


load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OBSIDIAN_VAULT_PATH = os.getenv("OBSIDIAN_VAULT_PATH_MOVIE")  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ Obsidian .env
TMDB_API_KEY = os.getenv("TMDB_API_KEY")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á –¥–ª—è TMDb –≤ .env

print(TMDB_API_KEY)


sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
def clean_filename(title):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    cleaned_title = re.sub(r'[^\w\s-]', '', title)
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # cleaned_title = cleaned_title.replace(" ", "_")
    return cleaned_title


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
def translate_to_english(text):
    try:
        translation = GoogleTranslator(source='auto', target='en').translate(text)
        return translation
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –≤ TMDb
def search_tmdb(title, year=None):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={title}&language=ru-RU"
    if year:
        url += f"&year={year}"
    response = requests.get(url)
    data = response.json()
    if data.get("results"):
        if year:
            for movie in data["results"]:
                release_date = movie.get("release_date", "")
                if release_date.startswith(str(year)):
                    return movie
                
        return data["results"][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ –ø–æ ID
def get_movie_details(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={TMDB_API_KEY}&language=ru-RU"
    response = requests.get(url)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–ª—å–º–∞ (—Ä–µ–∂–∏—Å—Å—ë—Ä—ã, –∞–∫—Ç—ë—Ä—ã –∏ —Ç.–¥.)
def get_movie_credits(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key={TMDB_API_KEY}"
    response = requests.get(url)
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
def is_russian(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    return any('\u0400' <= char <= '\u04FF' for char in text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
def extract_year(text):
    # –ò—â–µ–º –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY
    match = re.search(r"\b(19\d{2}|20\d{2})\b", text)
    return match.group(0) if match else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ —Å—Å—ã–ª–∫–∏
def format_as_links(items):
    if not items:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ [[–≠–ª–µ–º–µ–Ω—Ç]]
    return " ".join(f"[[{item}]]" for item in items)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
def format_genres(genres):
    if not genres:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä –≤ [[–ñ–∞–Ω—Ä]]
    return " ".join(f"[[{genre['name']}]]" for genre in genres)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
clipboard_text = pyperclip.paste().strip()

# –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
year = extract_year(clipboard_text)

# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –≥–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
title = re.sub(r"\b(19\d{2}|20\d{2})\b", "", clipboard_text).strip()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
if is_russian(title):
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é...")
    data = search_tmdb(title, year)

    # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
    if not data:
        print("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ...")
        transliterated_title = translit(title, 'ru', reversed=True)  # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        print(f"–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {transliterated_title}")
        data = search_tmdb(transliterated_title, year)

        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
        if not data:
            print("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
            translated_title = translate_to_english(title)
            if translated_title:
                print(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è: {translated_title}")
                data = search_tmdb(translated_title, year)
else:
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º...")
    data = search_tmdb(title, year)

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º Markdown-—Ñ–∞–π–ª
if data:
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞ –ø–æ ID
    movie_details = get_movie_details(data['id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ñ–∏–ª—å–º–∞ (—Ä–µ–∂–∏—Å—Å—ë—Ä—ã, –∞–∫—Ç—ë—Ä—ã –∏ —Ç.–¥.)
    movie_credits = get_movie_credits(data['id'])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤
    directors = [crew['name'] for crew in movie_credits.get('crew', []) if crew['job'] == 'Director']
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—è—Ç—å –≥–ª–∞–≤–Ω—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤
    top_actors = [actor['name'] for actor in movie_credits.get('cast', [])[:5]]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    title = movie_details.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    year = movie_details.get("release_date", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")[:4] if movie_details.get("release_date") else "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    description = movie_details.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    genres = movie_details.get("genres", [])
    poster_path = movie_details.get("poster_path", "")
    poster_url = f"https://image.tmdb.org/t/p/original{poster_path}" if poster_path else ""

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã, —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –∏ –∞–∫—Ç—ë—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
    genres_links = format_genres(genres)
    directors_links = format_as_links(directors)
    actors_links = format_as_links(top_actors)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    poster_md = f"![–ü–æ—Å—Ç–µ—Ä]({poster_url})" if poster_url else ""

    md_template = f"""---
title: {title}
year: {year}
director: {", ".join(directors) if directors else "–†–µ–∂–∏—Å—Å—ë—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
genre: {", ".join(genre['name'] for genre in genres) if genres else "–ñ–∞–Ω—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
description: {description}
type: movie
cover: {poster_url}
---

# {title}

{poster_md}

**–ì–æ–¥:** [[{year}]]  
**–†–µ–∂–∏—Å—Å—ë—Ä:** {directors_links}  
**–ê–∫—Ç—ë—Ä—ã:** {actors_links}  
**–ñ–∞–Ω—Ä:** {genres_links}  

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

### References

[[–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]]
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Obsidian
    file_name = f"{clean_filename(title)}.md"
    file_path = os.path.join(OBSIDIAN_VAULT_PATH, file_name)
    
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(md_template)
    
    print(f"‚úÖ –§–∞–π–ª {file_name} —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ Obsidian!")
else:
    print("‚ùå –û—à–∏–±–∫–∞: –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")