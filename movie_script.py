import requests
import pyperclip
import os
from deep_translator import GoogleTranslator


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OBSIDIAN_VAULT_PATH = r"C:\Users\user\iCloudDrive\iCloud~md~obsidian\divo\30 - Source Material\37 Films"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ Obsidian
OMDB_API_KEY = "5839c8e0"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á –¥–ª—è OMDb



if not os.path.exists(OBSIDIAN_VAULT_PATH):
    print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {OBSIDIAN_VAULT_PATH} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
else:
    print(f"‚úÖ –ü—É—Ç—å {OBSIDIAN_VAULT_PATH} –Ω–∞–π–¥–µ–Ω.")



def translate_to_english(text):
    try:
        translation = GoogleTranslator(source='auto', target='en').translate(text)
        return translation
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞
def search_movie(title):
    url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
    response = requests.get(url)
    data = response.json()
    return data if data.get("Response") == "True" else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
def is_russian(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    return any('\u0400' <= char <= '\u04FF' for char in text)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
title = pyperclip.paste().strip()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∏
def format_genres(genres):
    if not genres:
        return ""
    # –†–∞–∑–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä—ã –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    genre_list = [genre.strip() for genre in genres.split(",")]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä –≤ [[–ñ–∞–Ω—Ä]]
    return " ".join(f"[[{genre}]]" for genre in genre_list)



# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
if is_russian(title):
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é...")
    data = search_movie(title)

    # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
    if not data:
        print("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
        translated_title = translate_to_english(title)
        if translated_title:
            print(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è: {translated_title}")
            data = search_movie(translated_title)
else:
    print("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º...")
    data = search_movie(title)

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º Markdown-—Ñ–∞–π–ª
if data:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –≤ —Å—Å—ã–ª–∫–∏
    genres = format_genres(data.get("Genre", ""))

    md_template = f"""---
title: {data['Title']}
year: {data['Year']}
director: {data['Director']}
genre: {data['Genre']}
description: {data['Plot']}
type: movie
---

# {data['Title']}

**–ì–æ–¥:** [[{data['Year']}]]  
**–†–µ–∂–∏—Å—Å—ë—Ä:** [[{data['Director']}]]  
**–ñ–∞–Ω—Ä:** {genres}  

## –û–ø–∏—Å–∞–Ω–∏–µ
{data['Plot']}
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Obsidian
    file_name = f"{data['Title']}.md"
    file_path = os.path.join(OBSIDIAN_VAULT_PATH, file_name)
    
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(md_template)
    
    print(f"‚úÖ –§–∞–π–ª {file_name} —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ Obsidian!")
else:
    print("‚ùå –û—à–∏–±–∫–∞: –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")